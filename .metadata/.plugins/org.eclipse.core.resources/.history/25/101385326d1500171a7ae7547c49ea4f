import static java.lang.Math.pow;
import static org.junit.Assert.*;

import org.junit.Test;

public class MatrixTest {

	int n;
	double[][] mdata = new double[10][10] ;
	
	@Test
	public void testMatrix() {
		fail("Not yet implemented");
	}

	@Test
	public double testDeterminant() {
		double det = 0.0;
		
		if(n == 1)
		{
			det = mdata[0][0];
		}
		else if (n == 2)
		{
			det = mdata[0][0] * mdata[1][1] - mdata[0][1] * mdata[1][0];
		}
		else
		{
			for (int i = 0; i < n; ++i)
			{
				det += pow(-1.0, (double)i) * mdata[0][i] * subMatrix(0, i).determinant();
			}
		}
		
		return det;
		fail("Not yet implemented");
	}

	@Test
	public void testInverse() {
		fail("Not yet implemented");
	}

	@Test
	public void testSubMatrix() {
		fail("Not yet implemented");
	}

}
